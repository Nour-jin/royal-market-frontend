{"ast":null,"code":"import { connect } from 'react-redux';\nconst defaultState = {\n  items: [],\n  total: 0,\n  records: 0,\n  shippingFee: 0,\n  weight: 0,\n  vat: 0\n};\n\nconst sumItUp = basket => {\n  const kgPerRecord = 0.04;\n  const feePerPacket = 4.75;\n  const recordsPerPacket = 10;\n  basket.total = 0;\n  basket.records = 0;\n  basket.weight = 0;\n  basket.items.forEach(item => {\n    basket.total += item.product.price * item.count;\n    basket.records += item.count;\n    basket.weight += item.count * kgPerRecord;\n  });\n  basket.vat = basket.total / 1.19 * 0.19;\n  basket.shippingFee = Math.ceil(basket.records / recordsPerPacket) * feePerPacket;\n  if (basket.total > 100) basket.shippingFee *= 0.5;\n  return basket;\n};\n\nexport function basketReducer(state, action) {\n  if (!state) state = { ...defaultState\n  };\n  let newItems, product, count;\n  let {\n    index\n  } = action;\n\n  switch (action.type) {\n    case \"b/add\":\n      ({\n        product,\n        count\n      } = action);\n      const existsAlready = state.items.find(item => item.product._id === product._id);\n\n      if (existsAlready) {\n        index = state.items.indexOf(existsAlready);\n        newItems = state.items.slice();\n        newItems[index] = {\n          count: existsAlready.count + count,\n          product\n        };\n        state = { ...state,\n          items: newItems\n        };\n      } else {\n        state = { ...state,\n          items: [...state.items, {\n            product,\n            count\n          }]\n        };\n      }\n\n      break;\n\n    case \"b/delete\":\n      newItems = state.items.slice();\n      newItems.splice(index, 1);\n      state = { ...state,\n        items: newItems\n      };\n      break;\n\n    case \"b/increment\":\n      ({\n        product,\n        count\n      } = state.items[index]);\n      newItems = state.items.slice();\n      newItems[index] = {\n        count: Math.min(10, count + 1),\n        product\n      };\n      state = { ...state,\n        items: newItems\n      };\n      break;\n\n    case \"b/decrement\":\n      ({\n        product,\n        count\n      } = state.items[index]);\n      newItems = state.items.slice();\n      newItems[index] = {\n        count: Math.max(1, count - 1),\n        product\n      };\n      state = { ...state,\n        items: newItems\n      };\n      break;\n\n    case \"b/clear\":\n      state = { ...defaultState\n      };\n      break;\n    // im den login bildschirm anzuzeigen\n\n    default:\n      return state;\n  }\n\n  return sumItUp(state);\n}\nexport function mapBasketActionsProps(dispatch) {\n  return {\n    basketActions: {\n      add: (product, count = 1) => dispatch({\n        type: \"b/add\",\n        product,\n        count\n      }),\n      delete: index => dispatch({\n        type: \"b/delete\",\n        index\n      }),\n      increment: index => dispatch({\n        type: \"b/increment\",\n        index\n      }),\n      decrement: index => dispatch({\n        type: \"b/decrement\",\n        index\n      }),\n      clear: () => dispatch({\n        type: \"b/clear\"\n      })\n    }\n  };\n}\nexport function mapBasketStateToProps(state) {\n  return {\n    basket: state.basket\n  };\n}\nexport const withBasket = connect(mapBasketStateToProps, mapBasketActionsProps);","map":{"version":3,"sources":["/Users/noureddinnasrallah/Documents/online-shop-frontend/src/basket.js"],"names":["connect","defaultState","items","total","records","shippingFee","weight","vat","sumItUp","basket","kgPerRecord","feePerPacket","recordsPerPacket","forEach","item","product","price","count","Math","ceil","basketReducer","state","action","newItems","index","type","existsAlready","find","_id","indexOf","slice","splice","min","max","mapBasketActionsProps","dispatch","basketActions","add","delete","increment","decrement","clear","mapBasketStateToProps","withBasket"],"mappings":"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","sourcesContent":["\nimport { connect } from 'react-redux';\n\nconst defaultState = {\n  items:       [],\n  total:       0,\n  records:     0,\n  shippingFee: 0,\n  weight:      0,\n  vat:         0\n};\n\nconst sumItUp = (basket)=> {\n  const kgPerRecord  = 0.04;\n  const feePerPacket = 4.75;\n  const recordsPerPacket = 10;\n  basket.total   = 0;\n  basket.records = 0;\n  basket.weight  = 0;\n  basket.items\n  .forEach( item => {\n    basket.total   += item.product.price * item.count\n    basket.records += item.count\n    basket.weight  += item.count * kgPerRecord\n  });\n  basket.vat = ( basket.total / 1.19 ) * 0.19;\n  basket.shippingFee = Math.ceil( basket.records / recordsPerPacket ) * feePerPacket;\n  if ( basket.total > 100 ) basket.shippingFee *= 0.5;\n  return basket;\n}\n\nexport function basketReducer( state, action ){\n  if ( ! state ) state = { ...defaultState };\n\n  let newItems, product, count;\n  let { index } = action;\n\n  switch ( action.type ) {\n\n    case \"b/add\":\n      ({ product, count } = action);\n      const existsAlready = state.items.find( item => item.product._id === product._id );\n      if ( existsAlready ){\n        index    = state.items.indexOf(existsAlready);\n        newItems = state.items.slice();\n        newItems[index] = { count: existsAlready.count + count, product };\n        state = { ...state, items: newItems };\n      } else {\n        state = ({ ...state, items: [ ...state.items, { product, count } ] });\n      }\n      break;\n\n    case \"b/delete\":\n      newItems = state.items.slice();\n      newItems.splice(index,1);\n      state = { ...state, items: newItems };\n      break;\n\n    case \"b/increment\":\n      ({ product, count } = state.items[index]);\n      newItems = state.items.slice();\n      newItems[index] = { count: Math.min(10, count+1), product };\n      state = { ...state, items: newItems };\n      break;\n\n    case \"b/decrement\":\n      ({ product, count } = state.items[index]);\n      newItems = state.items.slice();\n      newItems[index] = { count: Math.max(1, count-1), product };\n      state = { ...state, items: newItems };\n      break;\n\n    case \"b/clear\":\n      state = { ...defaultState };\n      break;\n\n    // im den login bildschirm anzuzeigen\n\n\n    default: return state;\n  }\n  return sumItUp(state);\n}\n\nexport function mapBasketActionsProps(dispatch){\n  return { basketActions: {\n           add: (product,count=1)=> dispatch({ type:\"b/add\", product,count }),\n        delete:           (index)=> dispatch({ type:\"b/delete\", index }),\n     increment:           (index)=> dispatch({ type:\"b/increment\", index }),\n     decrement:           (index)=> dispatch({ type:\"b/decrement\", index }),\n         clear:                ()=> dispatch({ type:\"b/clear\" }),\n\n}}}\n\nexport function mapBasketStateToProps(state){\n  return { basket: state.basket }\n}\n\nexport const withBasket = connect(\n  mapBasketStateToProps,\n  mapBasketActionsProps\n)\n"]},"metadata":{},"sourceType":"module"}